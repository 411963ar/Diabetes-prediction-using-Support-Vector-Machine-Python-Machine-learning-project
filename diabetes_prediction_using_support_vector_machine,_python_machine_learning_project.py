# -*- coding: utf-8 -*-
"""Diabetes prediction using Support Vector Machine, Python-Machine learning project.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1vNoQkcb_cA9UriH9o7H7XrhlX9f70Mm5

Importing libraries
"""

import numpy as np
import pandas as pd
from sklearn.preprocessing import StandardScaler #to standardized data to same ranges
from sklearn.model_selection import train_test_split #for spliting data
from sklearn import svm #svm classifier
from sklearn.metrics import accuracy_score  #to measure accuracy

"""Data collection and analysis"""

df=pd.read_csv('/content/diabetes.csv') #loading dataset

df.head() # first 5 rows

df.shape

df.describe()

df['Outcome'].value_counts() #counting number of diabetic and not diabetic patients

# 0 represents non diabetic and 1 represents diabetic

df.groupby('Outcome').mean() # checking trends in mean

# Separating features from target output or separating input data and labels

x= df.drop(columns='Outcome',axis=1)
y=df['Outcome']

print(x)
print(y)

print(x.shape)
print(y.shape)

"""Data standardization"""

scalar= StandardScaler() #importing standardscalar function into a variable called sclalar
scalar.fit(x)

standardized_data=scalar.transform(x) # we can also do this in single step using scalar.fit_transform function

print(standardized_data)

X=standardized_data
Y= df['Outcome']

print(X)
print(Y)

"""Spliting data into train test split"""

x_train,x_test,y_train,y_test=train_test_split(X,Y,test_size=0.2,stratify=Y,random_state=2)

print(x_train)
print(x_test)
print(y_train)
print(y_test)

print(x_train.shape)
print(x_test.shape)
print(y_train.shape)
print(y_test.shape)

"""Training the model"""

classifier= svm.SVC(kernel='linear')# importing svm into variable called model,svc represent support vector classifier for classification,linear kernel means we will just use a linear boundry to separate classes

"""Training  classifier"""

# training the classifier

classifier.fit(x_train,y_train)

"""Evaluating classifier"""

# training accuracy

x_train_prediction= classifier.predict(x_train)
training_data_accuracy= accuracy_score(x_train_prediction,y_train)

print(training_data_accuracy)

#test data accuracy

x_test_prediction= classifier.predict(x_test)
test_data_accuracy=accuracy_score(x_test_prediction,y_test)
print(test_data_accuracy)

"""Building predictive system"""

input_data=(1,97,66,15,140,23.2,0.487,22)
#converting data into numpy array for efficient processing
input_data_as_numpy_array= np.asarray(input_data)
#reshaping np array for one instance of data
data_reshaped=input_data_as_numpy_array.reshape(1,-1)
#instance for correct prediction,we will use scalar.transform,we dont need to fit data as we already did it
std_data= scalar.transform(data_reshaped)
prediction= classifier.predict(std_data)
print(prediction)

if(prediction[0]== 1):
  print("The Patient is Diabetic")
else:
  print("The Patient is not Diabetic")

